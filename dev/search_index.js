var documenterSearchIndex = {"docs":
[{"location":"instrument/#Instruments-1","page":"Instruments","title":"Instruments","text":"","category":"section"},{"location":"instrument/#","page":"Instruments","title":"Instruments","text":"CurrentModule = OandaTrade.Instrument","category":"page"},{"location":"instrument/#Functions-1","page":"Instruments","title":"Functions","text":"","category":"section"},{"location":"instrument/#","page":"Instruments","title":"Instruments","text":"Instrument.getCandles\nInstrument.getOrderBook\nInstrument.getPositionBook","category":"page"},{"location":"instrument/#OandaTrade.Instrument.getCandles","page":"Instruments","title":"OandaTrade.Instrument.getCandles","text":"getCandles(config::config, instrument::String, lastn::Int = 10, price::String = \"M\", granularity::String = \"M5\";kwargs...)\ngetCandles(config::config, instrument::String, from::DateTime, to::DateTime, price::String = \"M\", granularity::AbstractString = \"M5\";kwargs...)\ngetCandles(config::config, instrument::String, from::DateTime, n::Int = 10, price::String = \"M\", granularity::AbstractString = \"M5\";kwargs...)\ngetCandles(config::config, instrument::String, n::Int, to::DateTime, price::String = \"M\", granularity::AbstractString = \"M5\";kwargs...)\ngetCandles(config::config, instrument::String, from::DateTime, price::String = \"M\", granularity::AbstractString = \"M5\";kwargs...)\n\nGet candle information of a given instrument and returns a Candle struct Information includes: time, granularity, open, high, low, close, volume and a complete indicator\n\nReturns an object of type 'candles'\n\ngetCandles has five ways to select the candles to retrieve\n\nlastn: last \"n\" candles\nfrom and to: candles in a time interval specified by two dates\nfrom and \"n\", to and \"n\": n candles from or to the specified date\nfrom: all candles from the specified date\"A\" for ask, \"B\" for bid, \"M\" for medium or a combination ot them\n\nArguments\n\n'config::config': a valid struct with user configuration data\n'instrument::String\": a valid instrument (e.g. \"EUR_USD\")\n'price::String': \"A\" for ask, \"B\" for bid, \"M\" for mid or a combination of them\n'granularity::String': a valid time interval [\"S5\",\"S10\",\"S15\",\"S30\",\"M1\",\"M2\",\"M4\",\"M5\",\"M10\",\"M15\",\"M30\",\"H1\",\"H2\",\"H3\",\"H4\",\"H6\",\"H8\",\"H12\",\"D\",\"W\",\"M\"]\n\nKeyword Arguments\n\n'smooth::Bool'\n'includeFirst::Bool'\n'dailyaligment::Int'\n'alignmentTimezone::String'\n'weeklyAlignment::String'\n\nExamples\n\ngetCandles(userdata,\"EUR_USD\",10,\"A\",\"M30\")\ngetCandles(userdata,\"EUR_JPY\",DateTime(2019,1,1),DateTime(2019,1,31),\"B\",\"H1\")\ngetCandles(userdata,\"EUR_USD\",DateTime(2019,1,31),10,\"A\",\"M30\")\ngetCandles(userdata,\"EUR_CHF\",10,DateTime(2019,1,31),\"AB\",\"M5\")\ngetCandles(userdata,\"EUR_USD\",DateTime(2019,1,31),\"M\",\"D\")\n\n\n\n\n\n","category":"function"},{"location":"instrument/#OandaTrade.Instrument.getOrderBook","page":"Instruments","title":"OandaTrade.Instrument.getOrderBook","text":"getOrderBook(config::config,instrument::String,time::DateTime=now())\n\nGet the order book data\n\nReturns an object of type 'OrderBook'\n\nArguments\n\n'config::config': A valid config object\n'instrument::String': The instrument key\n'time::DateTime': The time to request the order book for\n\nExample\n\ngetOrderBook(userdata,\"EUR_CHF\",DateTime(2017,1,31,4,00))\n\n\n\n\n\n","category":"function"},{"location":"instrument/#OandaTrade.Instrument.getPositionBook","page":"Instruments","title":"OandaTrade.Instrument.getPositionBook","text":"getPositionBook(config::config,instrument::String,time::DateTime=now())\n\nGet the position book data\n\nReturns an object of type 'positionBook'\n\nArguments\n\n'config::config': A valid config object\n'instrument::String': The instrument key\n'time::DateTime': The time to request the order book for\n\nExample\n\ngetPositionBook(userdata,\"EUR_CHF\",DateTime(2017,1,31,4,00))\n\n\n\n\n\n","category":"function"},{"location":"instrument/#Structs-1","page":"Instruments","title":"Structs","text":"","category":"section"},{"location":"instrument/#","page":"Instruments","title":"Instruments","text":"Instrument.candlestickdata\nInstrument.candlestick\nInstrument.candles\nInstrument.orderBookBucket\nInstrument.orderBook\nInstrument.positionBookBucket\nInstrument.positionBook","category":"page"},{"location":"instrument/#OandaTrade.Instrument.candlestickdata","page":"Instruments","title":"OandaTrade.Instrument.candlestickdata","text":"Candlestick tick data\n\nFields\n\n'o': Opening price\n'h': Highest price\n'l': Lowest price\n'c': Closing price\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.candlestick","page":"Instruments","title":"OandaTrade.Instrument.candlestick","text":"Candlesticks\n\nFields\n\n'time': The time the data corresponds to\n'bid::candlestickdata': Candlestick tick data for bids\n'ask::candlestickdata': Candlestick tick data for asks\n'mid::candlestickdata': Candlestick tick data for the mid\n'volume': Volume of trades\n'complete': is this complete data?\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.candles","page":"Instruments","title":"OandaTrade.Instrument.candles","text":"Candles\n\nFields\n\n'instrument': Instrument the data relates to\n'granularity': The granularity of the candle data\n'candles::Vector{candlestick}': The candlestick data\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.orderBookBucket","page":"Instruments","title":"OandaTrade.Instrument.orderBookBucket","text":"The order book bucket\n\nFields\n\n'price': The price\n'longCountPercent': Percent that are longs\n'shortCountPercent': Percent that are shorts\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.orderBook","page":"Instruments","title":"OandaTrade.Instrument.orderBook","text":"Order book\n\nFields\n\n'instrument': The instrument of the book\n'time': The time this data corresponds to\n'price': The price\n'bucketWidth': How many buckets there are\n'buckets::Vector{orderBookBucket}': The buckets\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.positionBookBucket","page":"Instruments","title":"OandaTrade.Instrument.positionBookBucket","text":"The bucket for the position book\n\nFields\n\n'price': The price\n'longCountPercent': The percent of orders that are long\n'shortCountPercent': The percent of orders that are short\n\n\n\n\n\n","category":"type"},{"location":"instrument/#OandaTrade.Instrument.positionBook","page":"Instruments","title":"OandaTrade.Instrument.positionBook","text":"The position book\n\nFields\n\n'instrument': The instrument of the book\n'time': The time this data corresponds to\n'price': The price\n'bucketWidth': How many buckets there are\n'buckets::Vector{positionBookBucket}': The buckets\n\n\n\n\n\n","category":"type"},{"location":"position/#Positions-1","page":"Positions","title":"Positions","text":"","category":"section"},{"location":"position/#","page":"Positions","title":"Positions","text":"CurrentModule = OandaTrade.Position","category":"page"},{"location":"position/#Functions-1","page":"Positions","title":"Functions","text":"","category":"section"},{"location":"position/#","page":"Positions","title":"Positions","text":"Position.listPositions\nPosition.listOpenPositions\nPosition.getPosition\nPosition.closePosition\nPosition.closePositionFull","category":"page"},{"location":"position/#OandaTrade.Position.listPositions","page":"Positions","title":"OandaTrade.Position.listPositions","text":"listPositions(config)\n\nReturns a list of current positions\n\nReturns an object of type 'Vector{position}'\n\nArguments\n\n'config::config': A valid config object\n\n\n\n\n\n","category":"function"},{"location":"position/#OandaTrade.Position.listOpenPositions","page":"Positions","title":"OandaTrade.Position.listOpenPositions","text":"listOpenPositions(config)\n\nReturns a list of current positions that have an open trade\n\nReturns an object of 'Vector{position}'\n\nArguments\n\n'config::config': A valid config object\n\n\n\n\n\n","category":"function"},{"location":"position/#OandaTrade.Position.getPosition","page":"Positions","title":"OandaTrade.Position.getPosition","text":"getPosition(config, instrument)\n\nReturns position data for a specified instrument\n\nReturns an object of type 'position'\n\nArguments\n\n'config::config': A valid config object\n'instrument': The instrument to get info from\n\n\n\n\n\n","category":"function"},{"location":"position/#OandaTrade.Position.closePosition","page":"Positions","title":"OandaTrade.Position.closePosition","text":"closePosition(config, instrument, LongUnits=NONE, ShortUnits=NONE)\n\nCloses a positions units based on input\n\nReturns true on success\n\nArguments\n\n'config::config': A valid config object\n'instrument': The instrument to act on\n'longUnits': The number of long units to close\n'shortUnits': The number of short units to close\n\n\n\n\n\n","category":"function"},{"location":"position/#OandaTrade.Position.closePositionFull","page":"Positions","title":"OandaTrade.Position.closePositionFull","text":"closePositionFull(config, instrument, long=true)\n\nCloses a position completely\n\nReturns true on success\n\nArguments\n\n'config::config': A valid config object\n'instrument': instrument to close\n'long::Bool': True to close long false to close short\n\n\n\n\n\n","category":"function"},{"location":"position/#Structs-1","page":"Positions","title":"Structs","text":"","category":"section"},{"location":"position/#","page":"Positions","title":"Positions","text":"Position.posData\nPosition.position","category":"page"},{"location":"position/#OandaTrade.Position.posData","page":"Positions","title":"OandaTrade.Position.posData","text":"Individual data for positions (A Long or Short)\n\nFields\n\n'pl': Profit / Loss\n'resettablePL': Profit / Loss since last reset\n'units': Number of units in the trade\n'unrealizedPL': Unrealized profit / loss in the posistion\n\n\n\n\n\n","category":"type"},{"location":"position/#OandaTrade.Position.position","page":"Positions","title":"OandaTrade.Position.position","text":"Detailed Position struct from Oanda\n\nFields\n\n'instrument': The instrument of the position\n'long::posData': Data for longs on the position\n'short::posData': Data for shorts on the position\n'pl': Overall profit / loss for the position\n'resettablePL': Profit / Loss since last reset\n'unrealizedPL': Unrealized profit / loss in the posistion\n\n\n\n\n\n","category":"type"},{"location":"transaction/#Transactions-1","page":"Transactions","title":"Transactions","text":"","category":"section"},{"location":"transaction/#","page":"Transactions","title":"Transactions","text":"CurrentModule = OandaTrade.Transaction","category":"page"},{"location":"transaction/#Functions-1","page":"Transactions","title":"Functions","text":"","category":"section"},{"location":"transaction/#","page":"Transactions","title":"Transactions","text":"Transaction.getTransactionPages\nTransaction.getTransaction\nTransaction.getTransactions","category":"page"},{"location":"transaction/#OandaTrade.Transaction.getTransactionPages","page":"Transactions","title":"OandaTrade.Transaction.getTransactionPages","text":"getTransactionPages(config::config; from::DateTime=nothing, to::DateTime=Dates.now(), pageSize::Int=100, type::String=nothing)\n\nReturn a struct. Field ':pages' includes the urls for requesting the transactions data in the given timeframe\n\nArguments\n\n'config::config': a valid config file\n'from::Union{DateTime, Nothing}': get transactions from\n'to::DateTime': get transactions to\n'pageSize::Int': Size of each page\n'type::Union{String,Nothing}': type of pages to request\n\nExample\n\ngetTransactionPages(userdata, from=DateTime(2019,5,31),type=\"MARKET_ORDER,STOP_LOSS_ORDER\")\n\n\n\n\n\n","category":"function"},{"location":"transaction/#OandaTrade.Transaction.getTransaction","page":"Transactions","title":"OandaTrade.Transaction.getTransaction","text":"getTransaction(config::config, tID::Int)\n\nReturn a Dictionary with the transaction data\n\nArguments\n\n'config::config': a valid config object\n'tID::Int': transaction ID\n\nExample\n\ngetTransaction(userdata,4)\n\n\n\n\n\n","category":"function"},{"location":"transaction/#OandaTrade.Transaction.getTransactions","page":"Transactions","title":"OandaTrade.Transaction.getTransactions","text":"getTransactions(config::config, fromID::Int, toID::Int, type::Union{String,Nothing}=nothing)\ngetTransactions(config::config, sinceID::Int, type::Union{String,Nothing}=nothing)\n\nReturn an array of Dictionaries with the transactions data\n\nArguments\n\n'config::config': a valid config struct\n'type::Union{String,Nothing}': Specify transaction types\n'fromID::Int', 'toID::Int': Get all transactions between two ID's\n\nOR\n\n'sinceID::Int': Get all transactions since an ID \n\nExamples\n\ngetTransactions(userdata,3,\"MARKET_ORDER,STOP_LOSS_ORDER\")\ngetTransactions(userdata,2,10)\n\n\n\n\n\n","category":"function"},{"location":"transaction/#Structs-1","page":"Transactions","title":"Structs","text":"","category":"section"},{"location":"transaction/#","page":"Transactions","title":"Transactions","text":"Transaction.transactionPages","category":"page"},{"location":"transaction/#OandaTrade.Transaction.transactionPages","page":"Transactions","title":"OandaTrade.Transaction.transactionPages","text":"The transaction pages\n\nFields\n\n'from': where pages start\n'to': where pages end\n'pageSize': size of each page\n'type::Vector{String}': The type of the transaction pages\n'count': number of pages\n'pages::Vector{String}': The pages\n'lastTransactionID': the last transaction id\n\n\n\n\n\n","category":"type"},{"location":"pricing/#Pricing-1","page":"Pricing","title":"Pricing","text":"","category":"section"},{"location":"pricing/#","page":"Pricing","title":"Pricing","text":"CurrentModule = OandaTrade.Pricing","category":"page"},{"location":"pricing/#Functions-1","page":"Pricing","title":"Functions","text":"","category":"section"},{"location":"pricing/#","page":"Pricing","title":"Pricing","text":"Pricing.getPrice\nPricing.checkMarket\nPricing.streamPrice\nPricing.getLatestCandles","category":"page"},{"location":"pricing/#OandaTrade.Pricing.getPrice","page":"Pricing","title":"OandaTrade.Pricing.getPrice","text":"function getPrice(config, instruments)\n\nGet the most recent price update of an instrument\n\nReturns an object of type 'priceData'\n\nArguments\n\n- 'config::config': a valid struct with user configuracion data\n- 'instruments::Vector{String}': a vector of valid pairs (e.g. [\"EUR_USD\",\"EUR_JPY\"])\n\n#Example\n\ngetPrice(userconfig, [\"EUR_USD\",\"EUR_JPY\"])\n\n\n\n\n\n","category":"function"},{"location":"pricing/#OandaTrade.Pricing.checkMarket","page":"Pricing","title":"OandaTrade.Pricing.checkMarket","text":"Get the most recent price update of an instrument\n\n\n\n\n\n","category":"function"},{"location":"pricing/#OandaTrade.Pricing.streamPrice","page":"Pricing","title":"OandaTrade.Pricing.streamPrice","text":"function streamprice(f, config , instruments)\n\nReturns a stream of price objects and apply a function to each one of them\n\nArguments\n\n- 'f::Function': a function to apply to each price struct object. Streamprice accepts do block format\n- 'config::config': a valid struct with user configuracion data\n- 'instruments::Vector{String}': a vector of valid pairs (e.g. [\"EUR_USD\",\"EUR_JPY\"])\n\n#Example\n\nstreamprice(userconfig, [\"EUR_JPY\"]) do price\n    println(price)\nend\n\n\n\n\n\n","category":"function"},{"location":"pricing/#Structs-1","page":"Pricing","title":"Structs","text":"","category":"section"},{"location":"pricing/#","page":"Pricing","title":"Pricing","text":"Pricing.priceBucket\nPricing.price\nPricing.candlestickdata\nPricing.candlestick\nPricing.candles","category":"page"},{"location":"pricing/#OandaTrade.Pricing.priceBucket","page":"Pricing","title":"OandaTrade.Pricing.priceBucket","text":"Ask / Bid pricing data\n\nArguments\n\n'price': Price of the ask / bid\n'liquidity': Liquidity of the ask / bid\n\n\n\n\n\n","category":"type"},{"location":"pricing/#OandaTrade.Pricing.price","page":"Pricing","title":"OandaTrade.Pricing.price","text":"Pricing data of an instrument\n\nArguments\n\n'type': Type\n'instrument': Instrument of the price\n'time': Time of the price update\n'bids::Vector{priceBucket}': bid info\n'asks::Vector{priceBucket}': ask info\n'closeoutBid': Closeout bid price\n'closeoutAsk': Closeout ask price\n'tradeable': Can you trade this instrument\n\n\n\n\n\n","category":"type"},{"location":"pricing/#OandaTrade.Pricing.candlestickdata","page":"Pricing","title":"OandaTrade.Pricing.candlestickdata","text":"Candlestick tick data\n\nFields\n\n'o': Opening price\n'h': Highest price\n'l': Lowest price\n'c': Closing price\n\n\n\n\n\n","category":"type"},{"location":"pricing/#OandaTrade.Pricing.candlestick","page":"Pricing","title":"OandaTrade.Pricing.candlestick","text":"Candlesticks\n\nFields\n\n'time': The time the data corresponds to\n'bid::candlestickdata': Candlestick tick data for bids\n'ask::candlestickdata': Candlestick tick data for asks\n'mid::candlestickdata': Candlestick tick data for the mid\n'volume': Volume of trades\n'complete': is this complete data?\n\n\n\n\n\n","category":"type"},{"location":"pricing/#OandaTrade.Pricing.candles","page":"Pricing","title":"OandaTrade.Pricing.candles","text":"Candles\n\nFields\n\n'instrument': Instrument the data relates to\n'granularity': The granularity of the candle data\n'candles::Vector{candlestick}': The candlestick data\n\n\n\n\n\n","category":"type"},{"location":"trade/#Trades-1","page":"Trades","title":"Trades","text":"","category":"section"},{"location":"trade/#","page":"Trades","title":"Trades","text":"CurrentModule = OandaTrade.Trade","category":"page"},{"location":"trade/#Functions-1","page":"Trades","title":"Functions","text":"","category":"section"},{"location":"trade/#","page":"Trades","title":"Trades","text":"Trade.getTrades\nTrade.getOpenTrades\nTrade.getTrade\nTrade.closeTrade\nTrade.clientExtensions\nTrade.setTradeOrders\nTrade.cancelTradeOrders","category":"page"},{"location":"trade/#OandaTrade.Trade.getTrades","page":"Trades","title":"OandaTrade.Trade.getTrades","text":"getTrades(config::config, instrument::String, state::String=\"OPEN\", count::Int=50; kwargs...)\n\nReturn an array of trade struct\n\nArguments\n\n'config::config': a valid struct with user configuration data\n'state::String\": the state to filter the requested Trades by (OPEN, CLOSED, CLOSEWHENTRADEABLE, ALL)\n'count::Int': max number of trades to return\n\nKeyword Arguments\n\n'instrument::String\": a valid instrument (e.g. \"EUR_USD\")\n'ids::String' List of trades to retrieve as ID values separated by commas\n'beforeID::String' The maximum trade ID to return\n\nExamples\n\ngetTrades(userConfig,\"CLOSED\";instrument=\"EUR_USD\")\n\n\n\n\n\n","category":"function"},{"location":"trade/#OandaTrade.Trade.getOpenTrades","page":"Trades","title":"OandaTrade.Trade.getOpenTrades","text":"getOpenTrades(config::config)\n\nReturn an array of trade struct\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n\nExamples\n\ngetOpenTrades(userconfig)\n\n\n\n\n\n","category":"function"},{"location":"trade/#OandaTrade.Trade.getTrade","page":"Trades","title":"OandaTrade.Trade.getTrade","text":"getTrade(config::config, tradeID::String)\n\nReturn a specific trade\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'id::string': a valid trade ID\n\nExamples\n\ngetTrades(userconfig,\"66\")\n\n\n\n\n\n","category":"function"},{"location":"trade/#OandaTrade.Trade.closeTrade","page":"Trades","title":"OandaTrade.Trade.closeTrade","text":"closeTrade(config::config, tradeID::String, units::Union{Real,String}=\"ALL\")\n\nReturn an array of trade struct\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'tradeID::string': a valid trade ID\n'units::Union{Number,String}': how much of the Trade to close in units or \"ALL\"\n\nExamples\n\ncloseTrade(userconfig,\"66\",\"ALL\")\n\n\n\n\n\n","category":"function"},{"location":"trade/#OandaTrade.Trade.clientExtensions","page":"Trades","title":"OandaTrade.Trade.clientExtensions","text":"clientExtensions(config::config, tradeID::String; clientID::String=\"\", tag::String=\"\", comment::String=\"\")\n\nLets add user information to a specific Trade\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'tradeID::string': a valid trade ID\nclientID, tag and comment: strings with the user information\n\nExample\n\nclientExtensions(userconfig,\"66\", clientID=\"007\",tag=\"foo\")\n\n\n\n\n\n","category":"type"},{"location":"trade/#OandaTrade.Trade.setTradeOrders","page":"Trades","title":"OandaTrade.Trade.setTradeOrders","text":"function setTradeOrders(config::config, tradeID::String; [TP::NamedTuple, SL::NamedTuple, tSL::NamedTuple ])\n\nCreate or modify the linked orders for a specific trade\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'tradeID::string': a valid trade ID\n\nAdditional Arguments\n\n'TP::NamedTuple' Take Profit parameters\n'SL::NamedTuple': Stop Loss parameters\n'tSL::NamedTuple': Trailing Stop Loss parameters\n\nAt least one type of order parameters must be provided\n\nValid order parameters\n\n'price = :Real' :price to create o modify for the specific order. Valir for Stop Loss and Take Profit\n'distance = :Real' :price distance to create o modify for the specific order. Valir for Stop Loss and Trailing Stip Loss\n'TIF= String': time in force for the order. Valid options are: GTC, GTD, GFD, FOK, IOC. Defaults to GTC\n'gtdTime = DateTime': time for GTD (Good unTill Date)\n\nPrice and distance are incompatible. Only one can be set for a given order.\n\nExample\n\nsetTradeOrders(userconfig, \"34\"; TP=(price=109.5,), SL=(distance=10,TIF=\"FOK\")) # Do not forget the comma for 1 element NamedTuples\n\n\n\n\n\n","category":"function"},{"location":"trade/#OandaTrade.Trade.cancelTradeOrders","page":"Trades","title":"OandaTrade.Trade.cancelTradeOrders","text":"function cancelTradeOrders(config::config, tradeID::String, orders2cancel::Vector{String})\n\nCancel linked orders of a specific trade\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'tradeID::string': a valid trade ID\n'orders2cancel::Vector{String}': list of orders to cancel.\n\norder2cancel valid fields are \"TP\" for Take Profit, \"SL\" for Stop Loss and \"tSL\" for Trailing Stop Loss\n\nExample\n\ncancelTradeOrders(userconfig, \"34\", [\"SL\", \"TP\"])\n\nend\n\n\n\n\n\n","category":"function"},{"location":"trade/#Structs-1","page":"Trades","title":"Structs","text":"","category":"section"},{"location":"trade/#","page":"Trades","title":"Trades","text":"Trade.trade\nTrade.closeUnitsResp\nTrade.clientExtensionsResp\nTrade.extensions\nTrade.tradeOrdersResponse\nTrade.takeProfit\nTrade.stopLoss\nTrade.trailingStopLoss\nTrade.tradeOrders\nTrade.nullTradeOrders","category":"page"},{"location":"trade/#OandaTrade.Trade.trade","page":"Trades","title":"OandaTrade.Trade.trade","text":"Detailed Trade struct from Oanda\n\n\n\n\n\n","category":"type"},{"location":"order/#Orders-1","page":"Orders","title":"Orders","text":"","category":"section"},{"location":"order/#","page":"Orders","title":"Orders","text":"CurrentModule = OandaTrade.Order","category":"page"},{"location":"order/#Functions-1","page":"Orders","title":"Functions","text":"","category":"section"},{"location":"order/#","page":"Orders","title":"Orders","text":"Order.marketOrder\nOrder.nonMarketOrder\nOrder.limitOrder\nOrder.stopOrder\nOrder.marketIfTouchedOrder\nOrder.relatedOrder\nOrder.getOrders\nOrder.getPendingOrders\nOrder.getOrder\nOrder.replaceOrder\nOrder.cancelOrder\nOrder.orderClientExtensions","category":"page"},{"location":"order/#OandaTrade.Order.marketOrder","page":"Orders","title":"OandaTrade.Order.marketOrder","text":"marketOrder(config, instrument, units;[TIF, positionFill, priceBound, TP ,SL ,tSL, clientExt ,tradeExt])\n\nPlaces a market order\n\nReturns a dictionary\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'instrument::String': a valid instrument (e.g. \"EUR_USD\")\n'units::String': units to buy (positive value) or sell (negative value)\n\nKeyword Arguments\n\n'TIF::String' : timeinForce value (\"GTC\",\"GTD\",\"GFD\",\"FOK\",\"IOC\")\n'positionFill::String' : how positions are modified when the order is filled (\"OPENONLY\", \"REDUCEFIRST\", \"REDUCE_ONLY\",\"DEFAULT\"). Defaults to \"DEFAULT\"\n'priceBound::String': worst price for filling\n'TP', 'SL', 'tSL' : a NamedTuple with order-on-fill details. Valid values are 'price::Real', 'distance::Real', 'timeInForce::String' and 'gtdTime::String'\n'clientExt'(not implemented)\n'tradeExt' (not implemented)\n\n#Examples\n\nmarketOrder(userData,\"EURJPY\",100)    marketOrder(userData,\"EURCHF\",100,SL=(distance=0.1,),TP=(price=1.12,),tSL=(distance=0.3,)) #Do not forget the comma for single value NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.limitOrder","page":"Orders","title":"OandaTrade.Order.limitOrder","text":"limitOrder(config, instrument, units, price;[TIF, positionFill, priceBound, TP ,SL ,tSL, clientExt ,tradeExt])\n\nPlaces a limit Order\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'instrument::String': a valid instrument (e.g. \"EUR_USD\")\n'units::String': units to buy (positive value) or sell (negative value)\n'price::Real'\n\nKeyword Arguments\n\n'TIF::String' : timeinForce value (\"GTC\",\"GTD\",\"GFD\",\"FOK\",\"IOC\")\n'positionFill::String' : how positions are modified when the order is filled (\"OPENONLY\", \"REDUCEFIRST\", \"REDUCE_ONLY\",\"DEFAULT\"). Defaults to \"DEFAULT\"\n'priceBound::String': worst price for filling\n'TP', 'SL', 'tSL' : a NamedTuple with order-on-fill details. Valid values are 'price::Real', 'distance::Real', 'timeInForce::String' and 'gtdTime::String'\n'clientExt'(not implemented)\n'tradeExt' (not implemented)\n\n#Examples\n\nlimitOrder(userData,\"EURUSD\",100, 1.10)    limitOrder(userData,\"EURJPY\",100,117,SL=(distance=1,),TP=(price=12,),tSL=(distance=3,)) #Do not forget the comma for single value NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.stopOrder","page":"Orders","title":"OandaTrade.Order.stopOrder","text":"stopOrder(config, instrument, units, price;[TIF, positionFill, priceBound, TP ,SL ,tSL, clientExt ,tradeExt])\n\nPlaces a stop Order\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'instrument::String': a valid instrument (e.g. \"EUR_USD\")\n'units::String': units to buy (positive value) or sell (negative value)\n'price::Real'\n\nKeyword Arguments\n\n'TIF::String' : timeinForce value (\"GTC\",\"GTD\",\"GFD\",\"FOK\",\"IOC\")\n'positionFill::String' : how positions are modified when the order is filled (\"OPENONLY\", \"REDUCEFIRST\", \"REDUCE_ONLY\",\"DEFAULT\"). Defaults to \"DEFAULT\"\n'priceBound::String': worst price for filling\n'TP', 'SL', 'tSL' : a NamedTuple with order-on-fill details. Valid values are 'price::Real', 'distance::Real', 'timeInForce::String' and 'gtdTime::String'\n'clientExt'(not implemented)\n'tradeExt' (not implemented)\n\n#Examples\n\nstopOrder(userData,\"EURUSD\",100, 1.10)   stopOrder(userData,\"EURJPY\",100,117,SL=(distance=1,),TP=(price=12,),tSL=(distance=3,)) #Do not forget the comma for single value NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.marketIfTouchedOrder","page":"Orders","title":"OandaTrade.Order.marketIfTouchedOrder","text":"marketIfTouchedOrder(config, instrument, units, price;[TIF, positionFill, priceBound, TP ,SL ,tSL, clientExt ,tradeExt])\n\nPlaces a market-if-touched Order\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'instrument::String': a valid instrument (e.g. \"EUR_USD\")\n'units::String': units to buy (positive value) or sell (negative value)\n'price::Real'\n\nKeyword Arguments\n\n'TIF::String' : timeinForce value (\"GTC\",\"GTD\",\"GFD\",\"FOK\",\"IOC\")\n'positionFill::String' : how positions are modified when the order is filled (\"OPENONLY\", \"REDUCEFIRST\", \"REDUCE_ONLY\",\"DEFAULT\"). Defaults to \"DEFAULT\"\n'priceBound::String': worst price for filling\n'TP', 'SL', 'tSL' : a NamedTuple with order-on-fill details. Valid values are 'price::Real', 'distance::Real', 'timeInForce::String' and 'gtdTime::String'\n'clientExt'(not implemented)\n'tradeExt' (not implemented)\n\n#Examples\n\nmarketifTouchedOrder(userData,\"EURuSD\",100, 1.10)   marketifTouchedOrder(userData,\"EURJPY\",100,117,SL=(distance=1,),TP=(price=12,),tSL=(distance=3,)) #Do not forget the comma for single value NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.relatedOrder","page":"Orders","title":"OandaTrade.Order.relatedOrder","text":" relatedOrder(config, tradeID, type, detail)\n\nPlaces a stop loss, take profit or trailing stop loss to an open trade (not order)\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'tradeID::Union{Int,String}': a valid open trade ID (e.g. \"123\")\n'type::String' : type of the order \"STOPLOSS\", \"TAKEPROFIT\" or \"TRAILINGSTOPLOSS\"\n'details::NamedTuple': a NamedTuple with order-on-fill details. Valid values are 'price::Real', 'distance::Real', 'timeInForce::String' and 'gtdTime::String'\n\n#Examples\n\nrelatedOrder(config, \"156\", \"STOP_LOSS\", details=(distance=0.1,)) #Do not forget the comma for single value NamedTuple\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.getOrders","page":"Orders","title":"OandaTrade.Order.getOrders","text":"getOrders(config, count::Int=50; kwargs...) getOrders(config, IDlist::Vector; kwargs...)\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'count::Int': number of orders to return\n'IDlist::Vector{String}' : a vector of valid order IDs\n\n#Keyword Arguments\n\n'state::String: a string with values \"PENDING\", \"FILLED\", \"TRIGGERED\", \"CANCELLED\" or \"ALL\". Defaults to \"PENDING\"\n'instrument::String'\n'beforeID::String': last ID to retrieve\n\n#Examples     getOrders(userData,5)     getOrders(userData,25, state=\"FILLED\", instrument=\"EUR_USD\")     getOrders(userData,[\"123\",\"234\",\"345\"])\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.getPendingOrders","page":"Orders","title":"OandaTrade.Order.getPendingOrders","text":"getPendingOrders(config)\n\n#Examples     getPendingOrders(userData)\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.getOrder","page":"Orders","title":"OandaTrade.Order.getOrder","text":"getOrder(config, orderID)\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'orderID::Union{String,Int}' : avalid order IDs\n\n#Examples     getOrder(userdata,\"100\")\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.replaceOrder","page":"Orders","title":"OandaTrade.Order.replaceOrder","text":"replaceOrder(config, ID, instrument, units;[TIF, positionFill, priceBound, TP ,SL ,tSL, clientExt ,tradeExt])\n\n#Examples\n\nreplaceOrder(userData,165,\"LIMIT\",\"EURJPY\",100)    replaceOrder(userData,170,\"EURCHF\",100,SL=(distance=0.1,),TP=(price=1.12,),tSL=(distance=0.3,))\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.cancelOrder","page":"Orders","title":"OandaTrade.Order.cancelOrder","text":"cancelOrder(config, ID::Union{String,Int})\n\n#Arguments\n\n'config::config': a valid struct with user configuration data\n'orderID::Union{String,Int}' : avalid order IDs\n\n#Examples     cancelOrder(userdata,\"100\")\n\n\n\n\n\n","category":"function"},{"location":"order/#OandaTrade.Order.orderClientExtensions","page":"Orders","title":"OandaTrade.Order.orderClientExtensions","text":"orderClientExtensions(config::config, tradeID::String; clientID::String=\"\", tag::String=\"\", comment::String=\"\")\n\nLets add user information to a specific Trade\n\nArguments\n\n'config::config': a valid struct with user configuracion data\n'tradeID::string': a valid trade ID\nclientID, tag and comment: strings with the user information\n\nExample\n\norderClientExtensions(userconfig,\"66\", clientID=\"007\",tag=\"foo\")\n\n\n\n\n\n","category":"function"},{"location":"order/#Structs-1","page":"Orders","title":"Structs","text":"","category":"section"},{"location":"order/#","page":"Orders","title":"Orders","text":"Order.extensions\nOrder.takeProfit\nOrder.stopLoss\nOrder.trailingStopLoss\nOrder.orderRequest","category":"page"},{"location":"order/#OandaTrade.Order.extensions","page":"Orders","title":"OandaTrade.Order.extensions","text":"clientExtension request structs\n\nFields\n\n'id::String': id of the extension\n'tag::String': tag of the extension\n'comment::String': comment of the extension\n\n\n\n\n\n","category":"type"},{"location":"order/#OandaTrade.Order.takeProfit","page":"Orders","title":"OandaTrade.Order.takeProfit","text":"Take profit order struct\n\nFields\n\n'price::Real': The price to execute at\n'timeInForce::String': The type of time in force\n'gtdTime::String': The gtd\n\n\n\n\n\n","category":"type"},{"location":"order/#OandaTrade.Order.stopLoss","page":"Orders","title":"OandaTrade.Order.stopLoss","text":"Stop loss order struct\n\nFields\n\n'price::Real': The price to execute at\n'distance::Real': The price distance\n'timeInForce::String': The type of time in force\n'gtdTime::String': The gtd\n\n\n\n\n\n","category":"type"},{"location":"order/#OandaTrade.Order.trailingStopLoss","page":"Orders","title":"OandaTrade.Order.trailingStopLoss","text":"Trailing stop loss order struct\n\nFields\n\n'distance::Real': The price distance\n'timeInForce::String': The type of time in force\n'gtdTime::String': The gtd\n\n\n\n\n\n","category":"type"},{"location":"order/#OandaTrade.Order.orderRequest","page":"Orders","title":"OandaTrade.Order.orderRequest","text":"Detailed OrderRequest struct from Oanda\n\nFields\n\n'clientExtensions::clientExtensions': Client extensions for the order\n'distance': for orders on fill\n'gtdTime'\n'instrument': instrument of the order\n'positionFill': Type of position fill on the order\n'price': Price the order is placed at\n'priceBound'\n'stopLossOnFill::stopLoss': Stop loss settings for an order\n'takeProfitOnFill::takeProfit' Take profit settings for an order\n'timeInForce': Type of time in force\n'tradeClientExtensions::clientExtensions': Client extensions for the trade\n'tradeID::String'\n'trailingStopLossOnFill::trailingStopLoss' Trailing stop loss settings for an order\n'triggerCondition': Trigger condition of the order\n'type': Type of order\n'units': Number of units (negative for a short, positive for a long)\n\n\n\n\n\n","category":"type"},{"location":"account/#Accounts-1","page":"Accounts","title":"Accounts","text":"","category":"section"},{"location":"account/#","page":"Accounts","title":"Accounts","text":"CurrentModule = OandaTrade.Account","category":"page"},{"location":"account/#Functions-1","page":"Accounts","title":"Functions","text":"","category":"section"},{"location":"account/#","page":"Accounts","title":"Accounts","text":"Account.listAccounts\nAccount.getAccount\nAccount.getAccountSummary\nAccount.getAccountInstruments\nAccount.setAccountConfig","category":"page"},{"location":"account/#OandaTrade.Account.listAccounts","page":"Accounts","title":"OandaTrade.Account.listAccounts","text":"listAccounts(config::config)\n\nReturns a list of all account IDs and tags authorized for the given Token\n\nReturns object of type 'Vector{accountListed}'\n\nArguments\n\n'config::config': a valid config object\n\n\n\n\n\n","category":"function"},{"location":"account/#OandaTrade.Account.getAccount","page":"Accounts","title":"OandaTrade.Account.getAccount","text":"getAccount(config::config)\n\nReturns an Oanda account struct when given a valid config\n\nReturns object of type 'account'\n\nArguments\n\n'config::config': a valid config object\n\n\n\n\n\n","category":"function"},{"location":"account/#OandaTrade.Account.getAccountSummary","page":"Accounts","title":"OandaTrade.Account.getAccountSummary","text":"getAccountSummary(config::config)\n\nSimilar to getAccount but doesnt return the order & trade & positions lists, however it still returns a full account struct, just with these fields left undefined\n\nReturns object of type 'account'\n\nArguments\n\n'config::config': a valid config object\n\n\n\n\n\n","category":"function"},{"location":"account/#OandaTrade.Account.getAccountInstruments","page":"Accounts","title":"OandaTrade.Account.getAccountInstruments","text":"getAccountInstruments(config::config, inst=nothing)\n\nReturns a list of tradeable instruments details for the account\n\nReturns object of type 'Vector{instrumentDetail}'\n\nArguments\n\n'config::config': a valid config object\n'inst::String': Can be left blank to return all tradeable instruments, or as a string csv of instruments to return their details\n\n\n\n\n\n","category":"function"},{"location":"account/#OandaTrade.Account.setAccountConfig","page":"Accounts","title":"OandaTrade.Account.setAccountConfig","text":"setAccountConfig(config::config, alias::String, marginRate::String)\n\nSet client configurable configuration settings\n\nReturns true on success\n\nArguments\n\n= 'config::config': a valid config object\n\n'alias::String': The account alias\n'marginRate::String': The desired decimal margin rate formatted as a string\n\n\n\n\n\n","category":"function"},{"location":"account/#Structs-1","page":"Accounts","title":"Structs","text":"","category":"section"},{"location":"account/#","page":"Accounts","title":"Accounts","text":"Account.account\nAccount.instrumentDetail","category":"page"},{"location":"account/#OandaTrade.Account.account","page":"Accounts","title":"OandaTrade.Account.account","text":"The account struct given by Oanda\n\nFields\n\n'NAV': The Net Asset Value of an account\n'alias': User defined alias if one exists\n'balance': Current Account Balance\n'createdByUserID': The User ID of the account creator\n'createdTime': The time the account was created\n'currency': The primary currency of the account\n'hedgingEnabled': If the account is allowed to hedge\n'id': The account ID\n'lastTransactionID': The last transaction ID\n'marginAvailable': The margin still available on the account\n'marginCloseoutMarginUsed': The closeout margin used\n'marginCloseoutNAV': Margins closeout NAV\n'marginCloseoutPercent': Margin closeout percent\n'marginCloseoutPositionValue': Margin closeout position value\n'marginCloseoutUnrealizedPL': Margin closeout unrealised profit/loss\n'marginRate': The margin rate\n'marginUsed': Amount of margin used\n'openPositionCount': Number of open positions\n'openTradeCount': Number of open trades\n'orders': Orders of the account\n'pendingOrderCount': Number of pending orders\n'pl': The profit or loss over the lifetime of the account\n'positionValue': Value of an accounts open positions\n'positions': Positions of the account\n'resettablePL': The resetable profit/loss since last reset\n'trades': Trades of the account\n'unrealizedPL': The unrealised profit/loss of the account\n'withdrawalLimit': The withdrawal limit of the account\n\n\n\n\n\n","category":"type"},{"location":"account/#OandaTrade.Account.instrumentDetail","page":"Accounts","title":"OandaTrade.Account.instrumentDetail","text":"Tradeable Instrument data\n\nFields\n\n'displayName': Instrument name\n'displayPrecision': Decimal precision of the instrument\n'marginRate': Margin rate on the instrument\n'maximumOrderUnits': Max units that can be ordered\n'maximumPositionSize': max position size of the instrument\n'maximumTrailingStopDistance': max trailing stop distance\n'minimumTrailingStopDistance': min trailing stop distance\n'name': Request usable instrument name\n'pipLocation': current pip location\n'tradeUnitsPrecision': Decimal precision of trade units\n'type': Type of instrument\n\n\n\n\n\n","category":"type"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"OandaTrade.jl is an API wrapper for Oanda's REST-v20 API. This wrapper allows you to access the full functionality of Oanda's API, including configuring your account, creating orders, and checking prices.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Note: All functions are exported, but the structs are not","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This Wrapper is currently incomplete and should be treated as such.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The docs are currently organized by Functions/structs, this does not allow for the clearest doc reading and will be changed","category":"page"},{"location":"#Getting-Started-1","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Getting started with OandaTrade.jl is simple! Install it using:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"$ Pkg.add(\"https://github.com/CalebDepatie/OandaTrade.jl.git\")","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"You will need to create a config file with your Oanda account information in the following YAML format:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"hostname: <<api-fxpractice.oanda.com or api-fxtrade.oanda.com>>\nstreaming_hostname: <<stream-fxpractice.oanda.com or stream-fxtrade.oanda.com>>\ntoken: <<your token>>\nusername: <<Account username>>\naccount: <<Account to initially interact with>>","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"If the config file was setup correctly the following code should work:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"using OandaTrade\nfoo = OandaTrade.Config.loadConfig(\"config\")\nbar = OandaTrade.Account.getAccount(foo)\nprintln(bar)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This will gave you a basic readout of your active account's information! Congratulations on your first OandaTrade.jl API call!","category":"page"},{"location":"config/#Config-1","page":"Config","title":"Config","text":"","category":"section"},{"location":"config/#","page":"Config","title":"Config","text":"CurrentModule = OandaTrade.Config","category":"page"},{"location":"config/#","page":"Config","title":"Config","text":"Config files are YAML files with the information required to make Oanda API Calls A sample config file is as follows:","category":"page"},{"location":"config/#","page":"Config","title":"Config","text":"hostname: <<api-fxpractice.oanda.com or api-fxtrade.oanda.com>>\nstreaming_hostname: <<stream-fxpractice.oanda.com or stream-fxtrade.oanda.com>>\ntoken: <<your token>>\nusername: <<Account username>>\naccount: <<Account to initially interact with>>","category":"page"},{"location":"config/#Functions-1","page":"Config","title":"Functions","text":"","category":"section"},{"location":"config/#","page":"Config","title":"Config","text":"Config.loadConfig\nConfig.saveConfig\nConfig.changeAccount","category":"page"},{"location":"config/#OandaTrade.Config.loadConfig","page":"Config","title":"OandaTrade.Config.loadConfig","text":"loadConfig(path::String)\n\nLoads a YAML config\n\nReturns object of type 'config'\n\nArguments\n\n'path::String': The relative path to the config file\n\n\n\n\n\n","category":"function"},{"location":"config/#OandaTrade.Config.saveConfig","page":"Config","title":"OandaTrade.Config.saveConfig","text":"saveConfig(path::String, config::config)\n\nSaves a config as a YAML file\n\nReturns true on success\n\nArguments\n\n'path::String': Path to save the config at\n'config::config': The config struct to save\n\n\n\n\n\n","category":"function"},{"location":"config/#OandaTrade.Config.changeAccount","page":"Config","title":"OandaTrade.Config.changeAccount","text":"changeAccount(config::config, account::string)\n\nChange the active account\n\nReturns object of type 'config'\n\nArguments\n\n'config::config': The config file to update\n'account::String': The string of the account identifier\n\n\n\n\n\n","category":"function"},{"location":"config/#Structs-1","page":"Config","title":"Structs","text":"","category":"section"},{"location":"config/#","page":"Config","title":"Config","text":"Config.config","category":"page"},{"location":"config/#OandaTrade.Config.config","page":"Config","title":"OandaTrade.Config.config","text":"Config struct required for connecting to Oanda\n\nFields\n\n'hostname::String': The hostname to direct the api to (practice or live)\n'streamingHostname::String': Streaming version of the hostname\n'token::String': The unique user token\n'username::String': Account username\n'account::String': Account presently being actively used\n'datetime::String': Accepted datetime format (should not be actively changed)\n\n\n\n\n\n","category":"type"}]
}
